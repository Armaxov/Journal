{"ast":null,"code":"import axios from 'axios';\nimport AuthenticationService from './AuthenticationService';\nconst API_URL = \"http://localhost:8080/api/users\";\nclass UserService {\n  getUsernameList() {\n    return axios.get(API_URL + \"/usernames\", AuthenticationService.getConfig());\n  }\n  getIdByUsername(username) {\n    return axios.get(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\n  }\n  getUsernameById(id) {\n    return axios.get(API_URL + \"/\" + id, AuthenticationService.getConfig());\n  }\n  createUser(user) {\n    return axios.post(API_URL, user, AuthenticationService.getConfig());\n  }\n  updateUser(username, newUser) {\n    return axios.put(API_URL + \"/usernames/\" + username, newUser, AuthenticationService.getConfig());\n  }\n  removeUser(username) {\n    return axios.delete(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\n  }\n  getRoles() {\n    return axios.get(API_URL + \"/roles\", AuthenticationService.getConfig());\n  }\n  getOpenedStudent(userId) {\n    return axios.get(API_URL + \"/openedStudent/\" + userId, AuthenticationService.getConfig());\n  }\n  getRoleById(userId) {\n    return axios.get(API_URL + \"/roles/\" + userId, AuthenticationService.getConfig());\n  }\n  async getCurrentUserRole() {\n    let username = '';\n    let getUsername = await AuthenticationService.getUsernameByToken();\n    username = getUsername.data;\n    let getId = await this.getIdByUsername(username);\n    return axios.get(API_URL + \"/roles/\" + getId.data, AuthenticationService.getConfig());\n  }\n  async isHaveAdminAccess() {\n    if (AuthenticationService.isUserLoggedIn()) {\n      let currentUserRole = '';\n      currentUserRole = (await this.getCurrentUserRole()).data;\n      if (currentUserRole == \"Admin\") return true;else return false;\n    } else return false;\n  }\n}\nexport default new UserService();","map":{"version":3,"names":["axios","AuthenticationService","API_URL","UserService","getUsernameList","get","getConfig","getIdByUsername","username","getUsernameById","id","createUser","user","post","updateUser","newUser","put","removeUser","delete","getRoles","getOpenedStudent","userId","getRoleById","getCurrentUserRole","getUsername","getUsernameByToken","data","getId","isHaveAdminAccess","isUserLoggedIn","currentUserRole"],"sources":["C:/Users/Arslan/eclipse-workspace/Journal/react-frontend/src/services/UserService.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst API_URL = \"http://localhost:8080/api/users\";\r\n\r\nclass UserService{\r\n    \r\n    getUsernameList(){\r\n        return axios.get(API_URL + \"/usernames\", AuthenticationService.getConfig());\r\n    }\r\n\r\n    getIdByUsername(username){\r\n        return axios.get(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\r\n    }\r\n\r\n    getUsernameById(id){\r\n        return axios.get(API_URL + \"/\" + id, AuthenticationService.getConfig());\r\n    }\r\n\r\n    createUser(user){\r\n        return axios.post(API_URL, user, AuthenticationService.getConfig());\r\n    }\r\n\r\n    updateUser(username, newUser){\r\n        return axios.put(API_URL + \"/usernames/\" + username, newUser, AuthenticationService.getConfig());\r\n    }\r\n\r\n    removeUser(username){\r\n        return axios.delete(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\r\n    }\r\n\r\n    getRoles(){\r\n        return axios.get(API_URL + \"/roles\", AuthenticationService.getConfig());\r\n    }\r\n\r\n    getOpenedStudent(userId){\r\n        return axios.get(API_URL + \"/openedStudent/\" + userId, AuthenticationService.getConfig());\r\n    }\r\n\r\n    getRoleById(userId){\r\n        return axios.get(API_URL + \"/roles/\" + userId, AuthenticationService.getConfig());\r\n    }\r\n\r\n    async getCurrentUserRole(){\r\n        let username = '';\r\n        let getUsername = await AuthenticationService.getUsernameByToken();\r\n        username = getUsername.data;\r\n        let getId = await this.getIdByUsername(username);\r\n        return axios.get(API_URL + \"/roles/\" + getId.data, AuthenticationService.getConfig());\r\n    }\r\n\r\n    async isHaveAdminAccess(){\r\n        if(AuthenticationService.isUserLoggedIn()){\r\n            let currentUserRole = '';\r\n            currentUserRole = (await this.getCurrentUserRole()).data;\r\n            if(currentUserRole == \"Admin\")\r\n                return true;\r\n            else \r\n                return false;\r\n        }\r\n        else \r\n            return false;\r\n    }\r\n}\r\n\r\nexport default new UserService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,qBAAqB,MAAM,yBAAyB;AAE3D,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW;EAEbC,eAAeA,CAAA,EAAE;IACb,OAAOJ,KAAK,CAACK,GAAG,CAACH,OAAO,GAAG,YAAY,EAAED,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EAC/E;EAEAC,eAAeA,CAACC,QAAQ,EAAC;IACrB,OAAOR,KAAK,CAACK,GAAG,CAACH,OAAO,GAAG,aAAa,GAAGM,QAAQ,EAAEP,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EAC3F;EAEAG,eAAeA,CAACC,EAAE,EAAC;IACf,OAAOV,KAAK,CAACK,GAAG,CAACH,OAAO,GAAG,GAAG,GAAGQ,EAAE,EAAET,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EAC3E;EAEAK,UAAUA,CAACC,IAAI,EAAC;IACZ,OAAOZ,KAAK,CAACa,IAAI,CAACX,OAAO,EAAEU,IAAI,EAAEX,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EACvE;EAEAQ,UAAUA,CAACN,QAAQ,EAAEO,OAAO,EAAC;IACzB,OAAOf,KAAK,CAACgB,GAAG,CAACd,OAAO,GAAG,aAAa,GAAGM,QAAQ,EAAEO,OAAO,EAAEd,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EACpG;EAEAW,UAAUA,CAACT,QAAQ,EAAC;IAChB,OAAOR,KAAK,CAACkB,MAAM,CAAChB,OAAO,GAAG,aAAa,GAAGM,QAAQ,EAAEP,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EAC9F;EAEAa,QAAQA,CAAA,EAAE;IACN,OAAOnB,KAAK,CAACK,GAAG,CAACH,OAAO,GAAG,QAAQ,EAAED,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EAC3E;EAEAc,gBAAgBA,CAACC,MAAM,EAAC;IACpB,OAAOrB,KAAK,CAACK,GAAG,CAACH,OAAO,GAAG,iBAAiB,GAAGmB,MAAM,EAAEpB,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EAC7F;EAEAgB,WAAWA,CAACD,MAAM,EAAC;IACf,OAAOrB,KAAK,CAACK,GAAG,CAACH,OAAO,GAAG,SAAS,GAAGmB,MAAM,EAAEpB,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EACrF;EAEA,MAAMiB,kBAAkBA,CAAA,EAAE;IACtB,IAAIf,QAAQ,GAAG,EAAE;IACjB,IAAIgB,WAAW,GAAG,MAAMvB,qBAAqB,CAACwB,kBAAkB,CAAC,CAAC;IAClEjB,QAAQ,GAAGgB,WAAW,CAACE,IAAI;IAC3B,IAAIC,KAAK,GAAG,MAAM,IAAI,CAACpB,eAAe,CAACC,QAAQ,CAAC;IAChD,OAAOR,KAAK,CAACK,GAAG,CAACH,OAAO,GAAG,SAAS,GAAGyB,KAAK,CAACD,IAAI,EAAEzB,qBAAqB,CAACK,SAAS,CAAC,CAAC,CAAC;EACzF;EAEA,MAAMsB,iBAAiBA,CAAA,EAAE;IACrB,IAAG3B,qBAAqB,CAAC4B,cAAc,CAAC,CAAC,EAAC;MACtC,IAAIC,eAAe,GAAG,EAAE;MACxBA,eAAe,GAAG,CAAC,MAAM,IAAI,CAACP,kBAAkB,CAAC,CAAC,EAAEG,IAAI;MACxD,IAAGI,eAAe,IAAI,OAAO,EACzB,OAAO,IAAI,CAAC,KAEZ,OAAO,KAAK;IACpB,CAAC,MAEG,OAAO,KAAK;EACpB;AACJ;AAEA,eAAe,IAAI3B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}