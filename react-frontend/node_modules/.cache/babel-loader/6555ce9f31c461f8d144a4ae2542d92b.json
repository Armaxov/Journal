{"ast":null,"code":"import axios from 'axios';\nimport AuthenticationService from './AuthenticationService';\nconst API_URL = \"http://localhost:8080/api/users\";\n\nclass UserService {\n  getUsernameList() {\n    return axios.get(API_URL + \"/usernames\", AuthenticationService.getConfig());\n  }\n\n  getIdByUsername(username) {\n    return axios.get(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\n  }\n\n  createUser(user) {\n    return axios.post(API_URL, user, AuthenticationService.getConfig());\n  }\n\n  updateUser(username, newUser) {\n    return axios.put(API_URL + \"/usernames/\" + username, newUser, AuthenticationService.getConfig());\n  }\n\n  removeUser(username) {\n    return axios.delete(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\n  }\n\n  getRoles() {\n    return axios.get(API_URL + \"/roles\", AuthenticationService.getConfig());\n  }\n\n  getOpenedStudent(userId) {\n    return axios.get(API_URL + \"/openedStudent/\" + userId, AuthenticationService.getConfig());\n  }\n\n  getRoleById(userId) {\n    return axios.get(API_URL + \"/roles/\" + userId, AuthenticationService.getConfig());\n  }\n\n  async getCurrentUserRole() {\n    let username = '';\n    let getUsername = await AuthenticationService.getUsernameByToken();\n    username = getUsername.data;\n    let getId = await this.getIdByUsername(username);\n    return axios.get(API_URL + \"/roles/\" + getId.data, AuthenticationService.getConfig());\n  }\n\n  async isHaveAdminAccess() {\n    if (AuthenticationService.isUserLoggedIn()) {\n      let currentUserRole = '';\n      currentUserRole = (await this.getCurrentUserRole()).data;\n      if (currentUserRole.toLocaleLowerCase() == \"admin\") return true;else return false;\n    } else return false;\n  }\n\n}\n\nexport default new UserService();","map":{"version":3,"sources":["C:/Users/Arslan/eclipse-workspace/Journal/react-frontend/src/services/UserService.js"],"names":["axios","AuthenticationService","API_URL","UserService","getUsernameList","get","getConfig","getIdByUsername","username","createUser","user","post","updateUser","newUser","put","removeUser","delete","getRoles","getOpenedStudent","userId","getRoleById","getCurrentUserRole","getUsername","getUsernameByToken","data","getId","isHaveAdminAccess","isUserLoggedIn","currentUserRole","toLocaleLowerCase"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,MAAMC,OAAO,GAAG,iCAAhB;;AAEA,MAAMC,WAAN,CAAiB;AAEbC,EAAAA,eAAe,GAAE;AACb,WAAOJ,KAAK,CAACK,GAAN,CAAUH,OAAO,GAAG,YAApB,EAAkCD,qBAAqB,CAACK,SAAtB,EAAlC,CAAP;AACH;;AAEDC,EAAAA,eAAe,CAACC,QAAD,EAAU;AACrB,WAAOR,KAAK,CAACK,GAAN,CAAUH,OAAO,GAAG,aAAV,GAA0BM,QAApC,EAA8CP,qBAAqB,CAACK,SAAtB,EAA9C,CAAP;AACH;;AAEDG,EAAAA,UAAU,CAACC,IAAD,EAAM;AACZ,WAAOV,KAAK,CAACW,IAAN,CAAWT,OAAX,EAAoBQ,IAApB,EAA0BT,qBAAqB,CAACK,SAAtB,EAA1B,CAAP;AACH;;AAEDM,EAAAA,UAAU,CAACJ,QAAD,EAAWK,OAAX,EAAmB;AACzB,WAAOb,KAAK,CAACc,GAAN,CAAUZ,OAAO,GAAG,aAAV,GAA0BM,QAApC,EAA8CK,OAA9C,EAAuDZ,qBAAqB,CAACK,SAAtB,EAAvD,CAAP;AACH;;AAEDS,EAAAA,UAAU,CAACP,QAAD,EAAU;AAChB,WAAOR,KAAK,CAACgB,MAAN,CAAad,OAAO,GAAG,aAAV,GAA0BM,QAAvC,EAAiDP,qBAAqB,CAACK,SAAtB,EAAjD,CAAP;AACH;;AAEDW,EAAAA,QAAQ,GAAE;AACN,WAAOjB,KAAK,CAACK,GAAN,CAAUH,OAAO,GAAG,QAApB,EAA8BD,qBAAqB,CAACK,SAAtB,EAA9B,CAAP;AACH;;AAEDY,EAAAA,gBAAgB,CAACC,MAAD,EAAQ;AACpB,WAAOnB,KAAK,CAACK,GAAN,CAAUH,OAAO,GAAG,iBAAV,GAA8BiB,MAAxC,EAAgDlB,qBAAqB,CAACK,SAAtB,EAAhD,CAAP;AACH;;AAEDc,EAAAA,WAAW,CAACD,MAAD,EAAQ;AACf,WAAOnB,KAAK,CAACK,GAAN,CAAUH,OAAO,GAAG,SAAV,GAAsBiB,MAAhC,EAAwClB,qBAAqB,CAACK,SAAtB,EAAxC,CAAP;AACH;;AAEuB,QAAlBe,kBAAkB,GAAE;AACtB,QAAIb,QAAQ,GAAG,EAAf;AACA,QAAIc,WAAW,GAAG,MAAMrB,qBAAqB,CAACsB,kBAAtB,EAAxB;AACAf,IAAAA,QAAQ,GAAGc,WAAW,CAACE,IAAvB;AACA,QAAIC,KAAK,GAAG,MAAM,KAAKlB,eAAL,CAAqBC,QAArB,CAAlB;AACA,WAAOR,KAAK,CAACK,GAAN,CAAUH,OAAO,GAAG,SAAV,GAAsBuB,KAAK,CAACD,IAAtC,EAA4CvB,qBAAqB,CAACK,SAAtB,EAA5C,CAAP;AACH;;AAEsB,QAAjBoB,iBAAiB,GAAE;AACrB,QAAGzB,qBAAqB,CAAC0B,cAAtB,EAAH,EAA0C;AACtC,UAAIC,eAAe,GAAG,EAAtB;AACAA,MAAAA,eAAe,GAAG,CAAC,MAAM,KAAKP,kBAAL,EAAP,EAAkCG,IAApD;AACA,UAAGI,eAAe,CAACC,iBAAhB,MAAuC,OAA1C,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;AACP,KAPD,MASI,OAAO,KAAP;AACP;;AArDY;;AAwDjB,eAAe,IAAI1B,WAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst API_URL = \"http://localhost:8080/api/users\";\r\n\r\nclass UserService{\r\n    \r\n    getUsernameList(){\r\n        return axios.get(API_URL + \"/usernames\", AuthenticationService.getConfig());\r\n    }\r\n\r\n    getIdByUsername(username){\r\n        return axios.get(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\r\n    }\r\n\r\n    createUser(user){\r\n        return axios.post(API_URL, user, AuthenticationService.getConfig());\r\n    }\r\n\r\n    updateUser(username, newUser){\r\n        return axios.put(API_URL + \"/usernames/\" + username, newUser, AuthenticationService.getConfig());\r\n    }\r\n\r\n    removeUser(username){\r\n        return axios.delete(API_URL + \"/usernames/\" + username, AuthenticationService.getConfig());\r\n    }\r\n\r\n    getRoles(){\r\n        return axios.get(API_URL + \"/roles\", AuthenticationService.getConfig());\r\n    }\r\n\r\n    getOpenedStudent(userId){\r\n        return axios.get(API_URL + \"/openedStudent/\" + userId, AuthenticationService.getConfig());\r\n    }\r\n\r\n    getRoleById(userId){\r\n        return axios.get(API_URL + \"/roles/\" + userId, AuthenticationService.getConfig());\r\n    }\r\n\r\n    async getCurrentUserRole(){\r\n        let username = '';\r\n        let getUsername = await AuthenticationService.getUsernameByToken();\r\n        username = getUsername.data;\r\n        let getId = await this.getIdByUsername(username);\r\n        return axios.get(API_URL + \"/roles/\" + getId.data, AuthenticationService.getConfig());\r\n    }\r\n\r\n    async isHaveAdminAccess(){\r\n        if(AuthenticationService.isUserLoggedIn()){\r\n            let currentUserRole = '';\r\n            currentUserRole = (await this.getCurrentUserRole()).data;\r\n            if(currentUserRole.toLocaleLowerCase() == \"admin\")\r\n                return true;\r\n            else \r\n                return false;\r\n        }\r\n        else \r\n            return false;\r\n    }\r\n}\r\n\r\nexport default new UserService();"]},"metadata":{},"sourceType":"module"}