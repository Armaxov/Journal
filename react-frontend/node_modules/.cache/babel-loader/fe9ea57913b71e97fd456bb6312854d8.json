{"ast":null,"code":"import axios from 'axios';\nimport AuthenticationService from './AuthenticationService';\nconst GROUP_API_BASE_URL = \"http://localhost:8080/api/groups\";\n\nclass GroupService {\n  getGroups() {\n    return axios.get(GROUP_API_BASE_URL, AuthenticationService.getConfig());\n  }\n\n  getGroupById(groupId) {\n    let currentGroup = '';\n    this.getGroups().then(res => {\n      res.data.forEach(group => {\n        if (group.id == groupId) {\n          currentGroup = group;\n          console.log(currentGroup);\n        }\n      });\n      return currentGroup;\n    });\n  }\n\n  createGroup(group) {\n    return axios.post(GROUP_API_BASE_URL, group, AuthenticationService.getConfig());\n  }\n\n  updateGroup(group, groupId) {\n    return axios.put(GROUP_API_BASE_URL + \"/\" + groupId, group, AuthenticationService.getConfig());\n  }\n\n  deleteGroup(groupId) {\n    return axios.delete(GROUP_API_BASE_URL + \"/\" + groupId, AuthenticationService.getConfig());\n  }\n\n  getGroupByName(name) {\n    let groupList = this.getGroups();\n    groupList.map(group => {\n      if (group.groupName === name) return group;\n      return '';\n    });\n  }\n\n}\n\nexport default new GroupService();","map":{"version":3,"sources":["C:/Users/Arslan/eclipse-workspace/Journal/react-frontend/src/services/GroupService.js"],"names":["axios","AuthenticationService","GROUP_API_BASE_URL","GroupService","getGroups","get","getConfig","getGroupById","groupId","currentGroup","then","res","data","forEach","group","id","console","log","createGroup","post","updateGroup","put","deleteGroup","delete","getGroupByName","name","groupList","map","groupName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,MAAMC,kBAAkB,GAAG,kCAA3B;;AAGA,MAAMC,YAAN,CAAkB;AACdC,EAAAA,SAAS,GAAE;AACP,WAAOJ,KAAK,CAACK,GAAN,CAAUH,kBAAV,EAA8BD,qBAAqB,CAACK,SAAtB,EAA9B,CAAP;AACH;;AAEDC,EAAAA,YAAY,CAACC,OAAD,EAAS;AACjB,QAAIC,YAAY,GAAG,EAAnB;AACA,SAAKL,SAAL,GAAiBM,IAAjB,CAAsBC,GAAG,IAAI;AAC7BA,MAAAA,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAkBC,KAAD,IAAW;AACpB,YAAGA,KAAK,CAACC,EAAN,IAAYP,OAAf,EAAuB;AACnBC,UAAAA,YAAY,GAAGK,KAAf;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;AACH;AACJ,OALL;AAMI,aAAOA,YAAP;AACH,KARD;AASH;;AAEDS,EAAAA,WAAW,CAACJ,KAAD,EAAO;AACd,WAAOd,KAAK,CAACmB,IAAN,CAAWjB,kBAAX,EAA+BY,KAA/B,EAAsCb,qBAAqB,CAACK,SAAtB,EAAtC,CAAP;AACH;;AAEDc,EAAAA,WAAW,CAACN,KAAD,EAAQN,OAAR,EAAgB;AACvB,WAAOR,KAAK,CAACqB,GAAN,CAAUnB,kBAAkB,GAAG,GAArB,GAA2BM,OAArC,EAA8CM,KAA9C,EAAqDb,qBAAqB,CAACK,SAAtB,EAArD,CAAP;AACH;;AAEDgB,EAAAA,WAAW,CAACd,OAAD,EAAS;AAChB,WAAOR,KAAK,CAACuB,MAAN,CAAarB,kBAAkB,GAAG,GAArB,GAA2BM,OAAxC,EAAiDP,qBAAqB,CAACK,SAAtB,EAAjD,CAAP;AACH;;AAEDkB,EAAAA,cAAc,CAACC,IAAD,EAAM;AAChB,QAAIC,SAAS,GAAG,KAAKtB,SAAL,EAAhB;AACAsB,IAAAA,SAAS,CAACC,GAAV,CAAcb,KAAK,IAAI;AACnB,UAAGA,KAAK,CAACc,SAAN,KAAoBH,IAAvB,EACI,OAAOX,KAAP;AACJ,aAAO,EAAP;AACH,KAJD;AAKH;;AArCa;;AAwClB,eAAe,IAAIX,YAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst GROUP_API_BASE_URL = \"http://localhost:8080/api/groups\"\r\n\r\n\r\nclass GroupService{\r\n    getGroups(){\r\n        return axios.get(GROUP_API_BASE_URL, AuthenticationService.getConfig());\r\n    }\r\n\r\n    getGroupById(groupId){\r\n        let currentGroup = '';\r\n        this.getGroups().then(res => {\r\n        res.data.forEach((group) => {\r\n                if(group.id == groupId){\r\n                    currentGroup = group;\r\n                    console.log(currentGroup);\r\n                }\r\n            });\r\n            return currentGroup;\r\n        });\r\n    }\r\n\r\n    createGroup(group){\r\n        return axios.post(GROUP_API_BASE_URL, group, AuthenticationService.getConfig());\r\n    }\r\n\r\n    updateGroup(group, groupId){\r\n        return axios.put(GROUP_API_BASE_URL + \"/\" + groupId, group, AuthenticationService.getConfig());\r\n    }\r\n\r\n    deleteGroup(groupId){\r\n        return axios.delete(GROUP_API_BASE_URL + \"/\" + groupId, AuthenticationService.getConfig());\r\n    }\r\n    \r\n    getGroupByName(name){\r\n        let groupList = this.getGroups();\r\n        groupList.map(group => {\r\n            if(group.groupName === name)\r\n                return group;\r\n            return '';\r\n        })\r\n    }\r\n}\r\n\r\nexport default new GroupService();"]},"metadata":{},"sourceType":"module"}